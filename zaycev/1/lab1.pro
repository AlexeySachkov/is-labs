/*
Задание:Для заданного количества узлов 17 решить задачу коммивояжера. Моделирование провести для 4-х вариантов расположения узлов.
Исходные данные:ветви графа, веса ветвей.
Результат:оптимальный путь.
*/
domains ss = symbol*
database - путь 
путь(symbol,integer,symbol)
оценка(ss,integer)
predicates
оптим_маршрут(ss,integer)
nondeterm маршруты(symbol,integer,ss,integer)
nondeterm вариант(symbol,integer,symbol,ss,integer)
nondeterm участок(symbol,integer,symbol)
уник(ss,ss,integer)
удалить(symbol,ss,ss)
принадлеж(symbol,ss)

clauses
путь(a,15,b).
путь(a,5,o).
путь(a,70,l).
путь(b,80,g).
путь(b,30,d).
путь(c,10,p).
путь(c,10,q).
путь(c,245,e).
путь(d,10,q).
путь(d,110,h).
путь(e,320,f).
путь(f,90,g).
путь(g,90,o).
путь(o,125,p).
путь(p,860,k).
путь(k,5,l).
путь(k,40,i).
путь(i,480,h).
путь(h,30,l).
путь(h,540,m).
путь(m,10,n).
путь(n,20,o).
путь(n,135,a).
путь(j,5,i).
путь(j,140,k).
путь(j,1320,m).
путь(i,60,g).
путь(p,20,q).
путь(p,25,d).

оптим_маршрут(Маршрут,Длина):-			путь(Начало,_,_),!,findall(Город,путь(Город,_,_),Города),уник(Города,_,Количество),маршруты(Начало,Количество,Маршрут,Длина),!.
						%findall - находит все элементы из списка
маршруты(Начало,Количество,_,_):-		вариант(Начало,Количество,Начало,[Начало],0),fail. %fail - для вывода всех маршрутов
маршруты(_,_,Маршрут,Длина):-			оценка(Маршрут,Длина).

вариант(Начало,0,От,Маршрут,Длина):-		участок(От,Участок,Начало), Длина1=Длина+Участок, not(оценка(_,_)), assert(оценка([Начало|Маршрут],Длина1)).
						%assert - добавление во внутреннюю базу фактов
вариант(Начало,0,От,Маршрут,Длина):-		участок(От,Участок,Начало), Длина1=Длина+Участок, оценка(_,Длина0),Длина1<Длина0, retract(оценка(_,Длина0)),
						assert(оценка([Начало|Маршрут],Длина1)).
						%retract - удаляет утверждение
					
вариант(Начало,К,От,Маршрут,Длина):-		К>0, участок(От,Участок,До), not(принадлеж(До,Маршрут)), Длина1=Участок+Длина, К1=К-1, вариант(Начало,К1,До,[До|Маршрут],Длина1).

уник([Э|Х],[Э|Х2],Число):-			удалить(Э,Х,Х1),!, уник(Х1,Х2,Число1),Число = Число1+1.
уник([],[],0).

удалить(Э,[Э|Х],Х1):-				!,удалить(Э,Х,Х1).
удалить(Э,[А|Х],[А|Х1]):-			!,удалить(Э,Х,Х1).
удалить(_,[],[]). 

участок(От,Длин,До):-				путь(От,Длин,До).
участок(От,Длин,До):-				путь(До,Длин,От).

принадлеж(Город,[Город|_]):-			!.
принадлеж(Город,[_|Города]):-			принадлеж(Город,Города).

goal
оптим_маршрут(Маршрут,Длина). %Формулировка запроса:поиск оптимального пути.
/*
Ответ:
оптим_маршрут(Маршрут,Длина).
решение - Маршрут=["a","n","o","p","q","c","e","f","g","i","j","k","l","h","d","b","a"], Длина=1360 1 Solution
*/
