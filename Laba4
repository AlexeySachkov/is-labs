
#import os
#os.environ ['TF_CPP_MIN_LOG_LEVEL'] = 2

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow import keras
from tensorflow.keras.layers import Dense, Flatten



(x_train, y_train), (x_test, y_test)=mnist.load_data()

x_train = x_train / 255
x_test = x_test / 255

y_train_cat = keras.utils.to_categorical (y_train, 10)
y_test_cat = keras.utils.to_categorical (y_train, 10)


plt.figure(figsize=(5,5))
for i in range(3):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(x_train[i], cmap=plt.cm.binary)

    plt.show()


    model = keras.Sequential([
        Flatten(input_shape=(28,28,1)),
        Dense(128, activation='relu'),
        Dense(10, activation='softmax')
    ])

print(model.summary())

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train_cat, batch_size=25, epochs=1, validation_split=0.2)

model.evaluate(x_train, y_train_cat)

n=5
x = np.expand_dims(x_test[n], axis=0)
res = model.predict(x)
print( res )
print(f"Цифра: {np.argmax(res)}")

plt.imshow(x_test[n], cmap=plt.cm.binary)
plt.show()



